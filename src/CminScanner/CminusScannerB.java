/* The following code was generated by JFlex 1.6.1 */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Copyright (C) 1998-2015  Gerwin Klein <lsf@jflex.de>                    *
 * All rights reserved.                                                    *
 *                                                                         *
 * License: BSD                                                            *
 *                                                                         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* Java 1.2 language lexer specification */

/* Use together with unicode.flex for Unicode preprocesssing */
/* and java12.cup for a Java 1.2 parser                      */

/* Note that this lexer specification is not tuned for speed.
   It is in fact quite slow on integer and floating point literals, 
   because the input is read twice and the methods used to parse
   the numbers are not very fast. 
   For a production quality application (e.g. a Java compiler) 
   this could be optimized */

package CminScanner;

import CminScanner.Token.TokenType;
import CminScanner.Token;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>java.flex</tt>
 */
public class CminusScannerB implements Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\42\1\0"+
    "\1\0\1\6\2\0\1\0\1\27\1\30\1\5\1\43\1\36\1\44"+
    "\1\0\1\4\1\7\1\46\1\45\1\52\1\47\1\10\1\53\1\50"+
    "\1\51\1\10\1\0\1\35\1\41\1\37\1\40\2\0\32\6\1\33"+
    "\1\0\1\34\1\0\1\6\1\0\3\6\1\24\1\11\1\17\1\6"+
    "\1\26\1\14\2\6\1\12\1\6\1\15\1\23\2\6\1\20\1\13"+
    "\1\16\1\21\1\22\1\25\3\6\1\31\1\0\1\32\44\0\4\6"+
    "\4\0\1\6\12\0\1\6\4\0\1\6\5\0\27\6\1\0\37\6"+
    "\1\0\u013f\6\31\0\162\6\4\0\14\6\16\0\5\6\11\0\1\6"+
    "\213\0\1\6\13\0\1\6\1\0\3\6\1\0\1\6\1\0\24\6"+
    "\1\0\54\6\1\0\46\6\1\0\5\6\4\0\202\6\10\0\105\6"+
    "\1\0\46\6\2\0\2\6\6\0\20\6\41\0\46\6\2\0\1\6"+
    "\7\0\47\6\110\0\33\6\5\0\3\6\56\0\32\6\5\0\13\6"+
    "\43\0\2\6\1\0\143\6\1\0\1\6\17\0\2\6\7\0\2\6"+
    "\12\0\3\6\2\0\1\6\20\0\1\6\1\0\36\6\35\0\3\6"+
    "\60\0\46\6\13\0\1\6\u0152\0\66\6\3\0\1\6\22\0\1\6"+
    "\7\0\12\6\43\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\1\6\3\0\4\6\3\0\1\6\36\0\2\6\1\0\3\6"+
    "\16\0\4\6\21\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\37\0\4\6\1\0\1\6"+
    "\23\0\3\6\20\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\5\6\3\0\1\6\22\0\1\6\17\0\2\6"+
    "\17\0\1\6\23\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\5\6\3\0\1\6\36\0\2\6\1\0\3\6"+
    "\17\0\1\6\21\0\1\6\1\0\6\6\3\0\3\6\1\0\4\6"+
    "\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6"+
    "\3\0\10\6\1\0\3\6\77\0\1\6\13\0\10\6\1\0\3\6"+
    "\1\0\27\6\1\0\12\6\1\0\5\6\46\0\2\6\43\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\3\0\1\6"+
    "\40\0\1\6\1\0\2\6\43\0\10\6\1\0\3\6\1\0\27\6"+
    "\1\0\20\6\46\0\2\6\43\0\22\6\3\0\30\6\1\0\11\6"+
    "\1\0\1\6\2\0\7\6\72\0\60\6\1\0\2\6\13\0\10\6"+
    "\72\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6"+
    "\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6"+
    "\2\0\2\6\1\0\4\6\1\0\2\6\11\0\1\6\2\0\5\6"+
    "\1\0\1\6\25\0\2\6\42\0\1\6\77\0\10\6\1\0\42\6"+
    "\35\0\4\6\164\0\42\6\1\0\5\6\1\0\2\6\45\0\6\6"+
    "\112\0\46\6\12\0\51\6\7\0\132\6\5\0\104\6\5\0\122\6"+
    "\6\0\7\6\1\0\77\6\1\0\1\6\1\0\4\6\2\0\7\6"+
    "\1\0\1\6\1\0\4\6\2\0\47\6\1\0\1\6\1\0\4\6"+
    "\2\0\37\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0\1\6"+
    "\1\0\4\6\2\0\7\6\1\0\7\6\1\0\27\6\1\0\37\6"+
    "\1\0\1\6\1\0\4\6\2\0\7\6\1\0\47\6\1\0\23\6"+
    "\105\0\125\6\14\0\u026c\6\2\0\10\6\12\0\32\6\5\0\113\6"+
    "\3\0\3\6\17\0\15\6\1\0\4\6\16\0\22\6\16\0\22\6"+
    "\16\0\15\6\1\0\3\6\17\0\64\6\43\0\1\6\3\0\2\6"+
    "\103\0\130\6\10\0\51\6\127\0\35\6\63\0\36\6\2\0\5\6"+
    "\u038b\0\154\6\224\0\234\6\4\0\132\6\6\0\26\6\2\0\6\6"+
    "\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6\1\0\1\6"+
    "\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6\4\0\15\6"+
    "\5\0\3\6\1\0\7\6\102\0\2\6\23\0\1\6\34\0\1\6"+
    "\15\0\1\6\40\0\22\6\120\0\1\6\4\0\1\6\2\0\12\6"+
    "\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\3\6\1\0\7\6\3\0\3\6\5\0\5\6"+
    "\26\0\44\6\u0e81\0\3\6\31\0\11\6\7\0\5\6\2\0\5\6"+
    "\4\0\126\6\6\0\3\6\1\0\137\6\5\0\50\6\4\0\136\6"+
    "\21\0\30\6\70\0\20\6\u0200\0\u19b6\6\112\0\u51a6\6\132\0\u048d\6"+
    "\u0773\0\u2ba4\6\u215c\0\u012e\6\2\0\73\6\225\0\7\6\14\0\5\6"+
    "\5\0\1\6\1\0\12\6\1\0\15\6\1\0\5\6\1\0\1\6"+
    "\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6"+
    "\2\0\66\6\50\0\15\6\66\0\2\6\30\0\3\6\31\0\1\6"+
    "\6\0\5\6\1\0\207\6\7\0\1\6\34\0\32\6\4\0\1\6"+
    "\1\0\32\6\12\0\132\6\3\0\6\6\2\0\6\6\2\0\6\6"+
    "\2\0\3\6\3\0\2\6\3\0\2\6\31\0\14\6\1\0\32\6"+
    "\1\0\23\6\1\0\2\6\1\0\17\6\2\0\16\6\42\0\173\6"+
    "\u0205\0\37\6\21\0\33\6\65\0\36\6\142\0\236\6\u0362\0\6\6"+
    "\2\0\1\6\1\0\54\6\1\0\2\6\3\0\1\6\2\0\1\6"+
    "\ucbc0\0\125\6\1\0\107\6\1\0\2\6\2\0\1\6\2\0\2\6"+
    "\2\0\4\6\1\0\14\6\1\0\1\6\1\0\7\6\1\0\101\6"+
    "\1\0\4\6\2\0\10\6\1\0\7\6\1\0\34\6\1\0\4\6"+
    "\1\0\5\6\1\0\1\6\3\0\7\6\1\0\u0152\6\4\0\31\6"+
    "\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6"+
    "\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0\6\6"+
    "\u2836\0\ua6d7\6\u5129\0\u021e\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\2\6\5\5"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\1\1\22\1\23\1\2\1\24"+
    "\2\5\1\25\3\5\1\26\1\27\1\30\1\31\1\0"+
    "\1\32\1\5\1\33\3\5\1\0\1\34\1\5\1\35"+
    "\1\5\1\0\1\5\1\36\1\0\1\37\5\0\1\40";

  private static int [] zzUnpackAction() {
    int [] result = new int[64];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\130\0\260\0\130\0\334"+
    "\0\130\0\u0108\0\u0134\0\u0160\0\u018c\0\u01b8\0\u01e4\0\130"+
    "\0\130\0\130\0\130\0\130\0\130\0\130\0\130\0\u0210"+
    "\0\u023c\0\u0268\0\u0294\0\130\0\u02c0\0\u02ec\0\130\0\u0318"+
    "\0\u0344\0\334\0\u0370\0\u039c\0\u03c8\0\130\0\130\0\130"+
    "\0\130\0\u03f4\0\130\0\u0420\0\334\0\u044c\0\u0478\0\u04a4"+
    "\0\u04d0\0\334\0\u04fc\0\334\0\u0528\0\u0554\0\u0580\0\334"+
    "\0\u05ac\0\334\0\u05d8\0\u0604\0\u0630\0\u065c\0\u0688\0\130";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[64];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\2\10\1\14\3\10\1\15\1\10\1\16\2\10"+
    "\1\17\1\10\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\7\12\5\5\1\36\46\5\56\0\1\5\56\0\1\37"+
    "\54\0\1\10\2\0\16\10\34\0\2\12\34\0\7\12"+
    "\6\0\1\10\2\0\1\10\1\40\14\10\33\0\1\10"+
    "\2\0\4\10\1\41\1\10\1\42\7\10\33\0\1\10"+
    "\2\0\1\43\15\10\33\0\1\10\2\0\12\10\1\44"+
    "\3\10\33\0\1\10\2\0\15\10\1\45\64\0\1\46"+
    "\53\0\1\47\53\0\1\50\53\0\1\51\61\0\1\52"+
    "\12\0\1\53\55\0\1\10\2\0\2\10\1\54\13\10"+
    "\33\0\1\10\2\0\5\10\1\55\10\10\33\0\1\10"+
    "\2\0\5\10\1\56\10\10\33\0\1\10\2\0\3\10"+
    "\1\57\12\10\33\0\1\10\2\0\3\10\1\60\12\10"+
    "\73\0\1\61\13\0\1\10\2\0\1\62\15\10\33\0"+
    "\1\10\2\0\10\10\1\63\5\10\33\0\1\10\2\0"+
    "\13\10\1\64\2\10\33\0\1\10\2\0\1\10\1\65"+
    "\14\10\74\0\1\66\12\0\1\10\2\0\7\10\1\67"+
    "\6\10\33\0\1\10\2\0\1\70\15\10\75\0\1\71"+
    "\11\0\1\10\2\0\4\10\1\72\11\10\74\0\1\73"+
    "\55\0\1\74\54\0\1\75\54\0\1\76\47\0\1\77"+
    "\55\0\1\100\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1716];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\6\1\10\11\4\1\1\11\2\1\1\11\6\1\4\11"+
    "\1\0\1\11\5\1\1\0\4\1\1\0\2\1\1\0"+
    "\1\1\5\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[64];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuilder string = new StringBuilder();
    private Token nextToken;
    private int lineLength;
    
     public static void main(String[] args) {
        try{
            File cminFile = new File("CminPrograms/program3.txt");
            CminusScannerB cminscanner = new CminusScannerB(new BufferedReader(new FileReader(cminFile)));
            
            while(cminscanner.viewNextToken().getTokenType() != TokenType.EOF){
                cminscanner.getNextToken();
            }
        }
        catch(IOException e){
            e.printStackTrace();
        }       
    }

    
   public Token viewNextToken(){
        return nextToken;
    }

   public Token getNextToken(){
        Token returnToken = nextToken;
        if(nextToken.getTokenType()!= TokenType.EOF){
            try{
                nextToken = yylex();
            }
            catch(IOException i){
                i.printStackTrace();
            }
        }
        printToken(nextToken);
        return returnToken;
    }

    private void printToken(Token current){
        try{
            String name = "tokens.csv";
            File output = new File(name);
            FileWriter fw;
                       
            if(!output.exists()){
                //print header columns first time
                fw = new FileWriter(output);
                fw.write("Token Type|Token Data|\n");
            }
            else{
                fw = new FileWriter(output, true);
            }
            
            fw.write(current.getTokenType().toString());
            //Could do very long if statement testing to see if we have correct 
            //types but if our scanner is working properly this will be fine
            if(current.getTokenData() != null && !(current.getTokenData().equals(""))){
                fw.write("|"+current.getTokenData()+"\n");
            }
            else{
                fw.write("\n");
            }
            fw.flush();
            fw.close();
        }
       catch(IOException e){
           e.printStackTrace();
       }
    }    

  /** 
   * assumes correct representation of a long value for 
   * specified radix in scanner buffer from <code>start</code> 
   * to <code>end</code> 
   */
  private long parseLong(int start, int end, int radix) {
    long result = 0;
    long digit;

    for (int i = start; i < end; i++) {
      digit  = Character.digit(yycharat(i),radix);
      result*= radix;
      result+= digit;
    }

    return result;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CminusScannerB(java.io.Reader in) {
          this.zzReader = in;
        lineLength = -1;
        String name = "tokens.csv";
        File output = new File(name);
        //Delete the file everytime scanner is run
        if(output.exists()){
            output.delete();
        }
        try{
            nextToken = yylex();
            printToken(nextToken);
        }
        catch(IOException i){
            i.printStackTrace();
        }
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1518) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case COMMENT: {
              throw new RuntimeException("File ended in the middle of a comment.");
            }
            case 65: break;
            default:
              {
                return new Token(Token.TokenType.EOF);
              }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
            }
          case 33: break;
          case 2: 
            { /* ignore */
            }
          case 34: break;
          case 3: 
            { return new Token(Token.TokenType.DIVIDE);
            }
          case 35: break;
          case 4: 
            { return new Token(Token.TokenType.MULTI);
            }
          case 36: break;
          case 5: 
            { return new Token(Token.TokenType.ID, yytext());
            }
          case 37: break;
          case 6: 
            { return new Token(Token.TokenType.INT, new Integer(yytext()));
            }
          case 38: break;
          case 7: 
            { return new Token(Token.TokenType.LP);
            }
          case 39: break;
          case 8: 
            { return new Token(Token.TokenType.RP);
            }
          case 40: break;
          case 9: 
            { return new Token(Token.TokenType.LCURLY);
            }
          case 41: break;
          case 10: 
            { return new Token(Token.TokenType.RCURLY);
            }
          case 42: break;
          case 11: 
            { return new Token(Token.TokenType.LBRACKET);
            }
          case 43: break;
          case 12: 
            { return new Token(Token.TokenType.RBRACKET);
            }
          case 44: break;
          case 13: 
            { return new Token(Token.TokenType.SEMICOLON);
            }
          case 45: break;
          case 14: 
            { return new Token(Token.TokenType.COMMA);
            }
          case 46: break;
          case 15: 
            { return new Token(Token.TokenType.EQUAL);
            }
          case 47: break;
          case 16: 
            { return new Token(Token.TokenType.GREATER);
            }
          case 48: break;
          case 17: 
            { return new Token(Token.TokenType.LESS);
            }
          case 49: break;
          case 18: 
            { return new Token(Token.TokenType.PLUS);
            }
          case 50: break;
          case 19: 
            { return new Token(Token.TokenType.MINUS);
            }
          case 51: break;
          case 20: 
            { yybegin(COMMENT);
            }
          case 52: break;
          case 21: 
            { return new Token(Token.TokenType.IF);
            }
          case 53: break;
          case 22: 
            { return new Token(Token.TokenType.DOUBLEEQUAL);
            }
          case 54: break;
          case 23: 
            { return new Token(Token.TokenType.GREATEREQ);
            }
          case 55: break;
          case 24: 
            { return new Token(Token.TokenType.LESSEQ);
            }
          case 56: break;
          case 25: 
            { return new Token(Token.TokenType.NOTEQUAL);
            }
          case 57: break;
          case 26: 
            { yybegin(YYINITIAL);
            }
          case 58: break;
          case 27: 
            { return new Token(Token.TokenType.INT);
            }
          case 59: break;
          case 28: 
            { return new Token(Token.TokenType.ELSE);
            }
          case 60: break;
          case 29: 
            { return new Token(Token.TokenType.VOID);
            }
          case 61: break;
          case 30: 
            { return new Token(Token.TokenType.WHILE);
            }
          case 62: break;
          case 31: 
            { return new Token(Token.TokenType.RETURN);
            }
          case 63: break;
          case 32: 
            { return new Token(Token.TokenType.INT, new Integer(Integer.MIN_VALUE));
            }
          case 64: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
